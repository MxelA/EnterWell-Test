// <auto-generated />
using System;
using EnterWellTest.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnterWellTest.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EnterWellTestDbContext))]
    partial class EnterWellTestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnterWellTest.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_date");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invoice_code");

                    b.Property<decimal>("PriceWithTax")
                        .HasColumnType("numeric")
                        .HasColumnName("price_with_tax");

                    b.Property<decimal>("PriceWithoutTax")
                        .HasColumnType("numeric")
                        .HasColumnName("price_without_tax");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_invoices");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_invoices_user_id");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer")
                        .HasColumnName("invoice_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("PriceWithTax")
                        .HasColumnType("numeric")
                        .HasColumnName("price_with_tax");

                    b.Property<decimal>("PriceWithoutTax")
                        .HasColumnType("numeric")
                        .HasColumnName("price_without_tax");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric")
                        .HasColumnName("quantity");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_invoice_items");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_invoice_items_invoice_id");

                    b.ToTable("invoice_items", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("integer")
                        .HasColumnName("role_id1");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.HasIndex("RoleId1")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id1");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer")
                        .HasColumnName("user_id1");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id1");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer")
                        .HasColumnName("user_id1");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id1");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<int?>("RoleId1")
                        .HasColumnType("integer")
                        .HasColumnName("role_id1");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer")
                        .HasColumnName("user_id1");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.HasIndex("RoleId1")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id1");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_asp_net_user_roles_user_id1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("UserId1")
                        .HasColumnType("integer")
                        .HasColumnName("user_id1");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_asp_net_user_tokens_user_id1");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("EnterWellTest.Domain.Entities.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoices_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("EnterWellTest.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_items_invoices_invoice_id");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("EnterWellTest.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");

                    b.HasOne("EnterWellTest.Domain.Entities.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId1")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("EnterWellTest.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");

                    b.HasOne("EnterWellTest.Domain.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("EnterWellTest.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");

                    b.HasOne("EnterWellTest.Domain.Entities.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("EnterWellTest.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("EnterWellTest.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId1")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id1");

                    b.HasOne("EnterWellTest.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");

                    b.HasOne("EnterWellTest.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("EnterWellTest.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");

                    b.HasOne("EnterWellTest.Domain.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EnterWellTest.Domain.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Invoices");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
